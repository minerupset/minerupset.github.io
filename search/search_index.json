{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Miner Curiosity Welcome. I'm not sure how you got here, but you're here now. It's nice to see you. I started this blog for two reasons: To help myself keep track of tips, tricks, and other things I pick up related to the wide-world of code To maybe one day help other people answer the same questions I've had over my time I didn't make this explicitly as a training site, so if you don't like the way I explain something / it's not as elegant as it could be, I'm honestly ok with that. That's why I don't have any comments on here - no sense in feeding the trolls. I will however do my best to not post anything that's flat out wrong, though. How this site is organized In a word: haphazardly. But learning, and especially learning software, can be haphazard. It is a bit of a truism that \"Computer outputs are rarely wrong; more often, we are wrong about what input or logic we give them.\" And while I agree with this, it doesn't mean there aren't some 'magic' steps we have to take to get our apps to work. I was never good at remembering magic steps. But you know what is? A computer. I work mostly with C#, Python, and JavaScript / TypeScript (very occasionally). I often find I spend a day breaking through some wall in a project, get super distracted by life, and then a month later, I come back and can't even remember the project, let alone the wall I had to break through. This is, simply put, bad for business. So, I've started to organize different topics to help me remember what things I did to solve problems; connecting to this or that database, the best way to write a unit test, and so on. I will try and organize topics first by language, and then grouping ideas together. Where relevant, I'll also try and cross reference similar themes from one language to another, whether highlighting similarities or differences. I won't pretend I'll be deeply rigorous on those elements, but I'll try and be as consistent as I can, and cite my sources so that I'm not just a crackpot. I have historically worked exclusively with Microsoft and Windows, but I am making the push towards UNIX based systems (currently working on a Mac). There may be a bit of cross over between the Ctrl key and the Command key, but you should be able to figure that out with some quick googling. Why MkDocs? Well, why anyone picks any option - a combination of good-enough and decision fatigue. With MkDocs, it was mostly the former. The boxes it checks for me are: Simple writing platform Markdown Deployment to GitHub Pages is a breeze Basic but powerful search functionality I don't need dates and tags (for now), but instead just need very basic organization Honestly, I'll probably end up upgrading to something else in the future (if you have any recommendations, think them really hard at me, because I don't have any commenting ability) but for now, this is enough for me. Perfect is indeed, the enemy of good.","title":"Miner Curiosity"},{"location":"#miner-curiosity","text":"Welcome. I'm not sure how you got here, but you're here now. It's nice to see you. I started this blog for two reasons: To help myself keep track of tips, tricks, and other things I pick up related to the wide-world of code To maybe one day help other people answer the same questions I've had over my time I didn't make this explicitly as a training site, so if you don't like the way I explain something / it's not as elegant as it could be, I'm honestly ok with that. That's why I don't have any comments on here - no sense in feeding the trolls. I will however do my best to not post anything that's flat out wrong, though.","title":"Miner Curiosity"},{"location":"#how-this-site-is-organized","text":"In a word: haphazardly. But learning, and especially learning software, can be haphazard. It is a bit of a truism that \"Computer outputs are rarely wrong; more often, we are wrong about what input or logic we give them.\" And while I agree with this, it doesn't mean there aren't some 'magic' steps we have to take to get our apps to work. I was never good at remembering magic steps. But you know what is? A computer. I work mostly with C#, Python, and JavaScript / TypeScript (very occasionally). I often find I spend a day breaking through some wall in a project, get super distracted by life, and then a month later, I come back and can't even remember the project, let alone the wall I had to break through. This is, simply put, bad for business. So, I've started to organize different topics to help me remember what things I did to solve problems; connecting to this or that database, the best way to write a unit test, and so on. I will try and organize topics first by language, and then grouping ideas together. Where relevant, I'll also try and cross reference similar themes from one language to another, whether highlighting similarities or differences. I won't pretend I'll be deeply rigorous on those elements, but I'll try and be as consistent as I can, and cite my sources so that I'm not just a crackpot. I have historically worked exclusively with Microsoft and Windows, but I am making the push towards UNIX based systems (currently working on a Mac). There may be a bit of cross over between the Ctrl key and the Command key, but you should be able to figure that out with some quick googling.","title":"How this site is organized"},{"location":"#why-mkdocs","text":"Well, why anyone picks any option - a combination of good-enough and decision fatigue. With MkDocs, it was mostly the former. The boxes it checks for me are: Simple writing platform Markdown Deployment to GitHub Pages is a breeze Basic but powerful search functionality I don't need dates and tags (for now), but instead just need very basic organization Honestly, I'll probably end up upgrading to something else in the future (if you have any recommendations, think them really hard at me, because I don't have any commenting ability) but for now, this is enough for me. Perfect is indeed, the enemy of good.","title":"Why MkDocs?"},{"location":"csharp-hello-world/","text":"C# - Some Basics and Hello World C# Value Prop I have a confession to make: I started learning how to code in the most business-like of environments, the VBA window of Excel files. I will forever feel like 'not a real developer' because of this. Since then, I like to think I've advanced some, but at the end of the day, I'm still the same anxious consultant looking to get an accurate answer as fast as possible. VBA was good for that then, because I was almost always crunching Excel data, but now, I would say my go to language is C#. It's a good mix of familiar constructs and powerful tools and libraries, and has a wide range of application. Why C# has worked well for me: Strong typing: Don't get me wrong, I love Python because it 'just works'. But that same beauty has been a major thorn in my side in enterprise settings, making sure things are consistent throughout an application. C# is almost always strongly typed , but does have a type (dynamic) for when something might shift over time. Object-oriented structure: Call me old fashion, but I often think in terms of concrete objects. Actual things that have properties and methods that I can visualize. Not everyone thinks this way, it may even be a crutch to think this way, but it's my default. C# makes working with classes and objects simple, and I can easily visualize my tasks in an intuitive way that I can't as easily with functional programming. Wide-spread use: We all know Python gets a lot of love because it can do anything. And it's well-earned; Python is practically synonymous with machine learning and data science, it stitches together some of the most popular web apps around the world, and it's a great introductory language to boot. But C# is hardly esoteric; ASP.NET still powers many widely used websites, .NET Core can be deployed on Windows, Mac, and Linux, and .NET integrates quite seamlessly with Azure deployment (Amazon's biggest competitor in the space). Throw in some newer toys like ML.NET, and you're hardly limited with C#. Challenges with C# Fewer libraries : It seems like pip for Python and npm for NodeJS have just about every tool you could possibly think of (whether you need it or not). Microsoft's NuGet on the other hand has definitely left me with some headaches in the past. There have been improvements, but it's a far cry from a perfect set up. Too Many -azors : If you've ever seen the movie 'Dodgeball', you may recall a scene where Ben Stiller's character introduces his mercenary team of pro dodgeballers. I can't look at Razor Pages or Blazor Pages without thinking of this scene, and feeling as confused as the protagonists. I'm all for good front-end templates, but this is one part where Microsoft did lose me. Blazor seems to have been a step in the right direction with its component structure, but it still requires a boatload of configuration to make it work. Basic C# Console App - Hello World Ok, to the meat of it. Let's make a simple Hello World app. Assuming you have: Downloaded VS Code Installed the C# Extension This is actually relatively simple. Open the terminal window (Ctrl + ~), navigate to the directory of choice, and run dotnet new console . This should create the necessary files you need, such as your bin folder, your .csproj file, and your Program.cs file, which will be the main code entry point into your application. Resources and References Static vs. Strong Typing dotnet new Docs","title":"Hello World"},{"location":"csharp-hello-world/#c-some-basics-and-hello-world","text":"","title":"C# - Some Basics and Hello World"},{"location":"csharp-hello-world/#c-value-prop","text":"I have a confession to make: I started learning how to code in the most business-like of environments, the VBA window of Excel files. I will forever feel like 'not a real developer' because of this. Since then, I like to think I've advanced some, but at the end of the day, I'm still the same anxious consultant looking to get an accurate answer as fast as possible. VBA was good for that then, because I was almost always crunching Excel data, but now, I would say my go to language is C#. It's a good mix of familiar constructs and powerful tools and libraries, and has a wide range of application.","title":"C# Value Prop"},{"location":"csharp-hello-world/#basic-c-console-app-hello-world","text":"Ok, to the meat of it. Let's make a simple Hello World app. Assuming you have: Downloaded VS Code Installed the C# Extension This is actually relatively simple. Open the terminal window (Ctrl + ~), navigate to the directory of choice, and run dotnet new console . This should create the necessary files you need, such as your bin folder, your .csproj file, and your Program.cs file, which will be the main code entry point into your application.","title":"Basic C# Console App - Hello World"},{"location":"csharp-hello-world/#resources-and-references","text":"Static vs. Strong Typing dotnet new Docs","title":"Resources and References"},{"location":"git-github-learnings/","text":"","title":"Git / GitHub"},{"location":"html-and-css/","text":"HTML and CSS - the Building Blocks A Reminder about Tools Web development can often look like a large, scary beast, with so many tools and steps and requirements and everything pulling every which way. This becomes true of any field, once you get deep enough into it. At the core though, it's all pretty simple: web browsers read HTML and CSS and make them look a certain way on a webpage (statically). Javascript can make your pages dynamic* , but we don't need that right now. HTML and CSS are all you need to make a webpage display in a browser. Everything else on top of this - React components and Node servers and APIs and all that jazz, at the end of the day, resolve to someone somewhere having the right HTML and CSS put in front of them. Many of the core tools you'll use manipulate HTML and CSS in one way or another so that you're not manually typing out web pages. Everything else, like video encoding, downloading files, and dynamic web apps are all details that come later. HTML - Your Structure CSS - Your Design Resources and References Yes, I know that HTML and CSS can have some dynamic elements to them too, but like any high level topic, we start with the simple lies and eventually build to uncomfortable truths.","title":"Basic HTML & CSS"},{"location":"html-and-css/#html-and-css-the-building-blocks","text":"","title":"HTML and CSS - the Building Blocks"},{"location":"html-and-css/#a-reminder-about-tools","text":"Web development can often look like a large, scary beast, with so many tools and steps and requirements and everything pulling every which way. This becomes true of any field, once you get deep enough into it. At the core though, it's all pretty simple: web browsers read HTML and CSS and make them look a certain way on a webpage (statically). Javascript can make your pages dynamic* , but we don't need that right now. HTML and CSS are all you need to make a webpage display in a browser. Everything else on top of this - React components and Node servers and APIs and all that jazz, at the end of the day, resolve to someone somewhere having the right HTML and CSS put in front of them. Many of the core tools you'll use manipulate HTML and CSS in one way or another so that you're not manually typing out web pages. Everything else, like video encoding, downloading files, and dynamic web apps are all details that come later.","title":"A Reminder about Tools"},{"location":"html-and-css/#html-your-structure","text":"","title":"HTML - Your Structure"},{"location":"html-and-css/#css-your-design","text":"","title":"CSS - Your Design"},{"location":"html-and-css/#resources-and-references","text":"Yes, I know that HTML and CSS can have some dynamic elements to them too, but like any high level topic, we start with the simple lies and eventually build to uncomfortable truths.","title":"Resources and References"},{"location":"js-hello-world/","text":"","title":"Hello World"},{"location":"legal/","text":"Legal Notices We live in a world of lawyers, so here's the deal: I am putting this code up here for myself, for me to keep track of. If in the process of that, you learn something from it, that's great and genuinely makes me happy, but if you fry your system because you tried some code I wrote and it went sideways for you, that's on you, not on me. Code is inherently a 'dangerous' thing when used inappropriately, so just remember: \"Here there be dragons\". Copyright 2019 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Legal Notices"},{"location":"legal/#legal-notices","text":"We live in a world of lawyers, so here's the deal: I am putting this code up here for myself, for me to keep track of. If in the process of that, you learn something from it, that's great and genuinely makes me happy, but if you fry your system because you tried some code I wrote and it went sideways for you, that's on you, not on me. Code is inherently a 'dangerous' thing when used inappropriately, so just remember: \"Here there be dragons\". Copyright 2019 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Legal Notices"},{"location":"python-hello-world/","text":"","title":"Hello World"},{"location":"vs-code-tools/","text":"VS Code Tools Useful Shortcuts to Memorize Ctrl + ~ - access the terminal Ctrl + Shift + P - Enter VS Code tools (Command Palette) Ctrl + / - Toggle commenting Making C# Development Easier in VS Code C# (powered by OmniSharp). This is what actually makes C# go. Making Python Development Easier in VS Code Making JavaScript Development Easier in VS Code Other Useful Extensions Rainbow CSV Spell check","title":"VS Code Tools"},{"location":"vs-code-tools/#vs-code-tools","text":"","title":"VS Code Tools"},{"location":"vs-code-tools/#useful-shortcuts-to-memorize","text":"Ctrl + ~ - access the terminal Ctrl + Shift + P - Enter VS Code tools (Command Palette) Ctrl + / - Toggle commenting","title":"Useful Shortcuts to Memorize"},{"location":"vs-code-tools/#making-c-development-easier-in-vs-code","text":"C# (powered by OmniSharp). This is what actually makes C# go.","title":"Making C# Development Easier in VS Code"},{"location":"vs-code-tools/#making-python-development-easier-in-vs-code","text":"","title":"Making Python Development Easier in VS Code"},{"location":"vs-code-tools/#making-javascript-development-easier-in-vs-code","text":"","title":"Making JavaScript Development Easier in VS Code"},{"location":"vs-code-tools/#other-useful-extensions","text":"Rainbow CSV Spell check","title":"Other Useful Extensions"}]}