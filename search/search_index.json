{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":true},"docs":[{"location":"","text":"","title":"Home"},{"location":"#posts-in-chronological-order","text":"<p>Welcome to my thoughts. I hope you find what you're looking for.</p>     Title Article Length Publish Date     Introduction to Version Control and <code>git</code> Mixed Greens 20-12-2021   Excel and VBA are Gateway Drugs Steak Dinner 13-12-2021   Blog Introduction Steak Dinner 06-12-2021","title":"Posts in Chronological Order"},{"location":"about/","text":"<p>I get curious about things. This is a place where I can share what I learn, even if it's only with my future self. If you found something useful or just want to chat, feel free to drop me a note at minercuriosity@outlook.com. I don't check it often, but every once in a while I may respond.</p>","title":"About Miner Curiosity"},{"location":"legal/","text":"","title":"Legal"},{"location":"legal/#when-it-comes-to-any-financial-information-displayed-on-this-website","text":"<p>I am not a licensed financial professional, and none of what is written here should be construed as financial advice. What you choose to do with your money is ultimately your responsibility, and I am not responsible for any outcomes, positive or negative, that occur from you having read about my own financial situation or musings.</p>","title":"When it comes to any financial information displayed on this website:"},{"location":"legal/#when-it-comes-to-any-home-repairs-or-diy-situations-displayed-on-this-website","text":"<p>I am not a licensed contractor or repairman, and none of what is written here should be performed without first consulting and/or hiring a trained and licensed professional in your area.</p>","title":"When it comes to any home repairs or DIY situations displayed on this website:"},{"location":"legal/#when-it-comes-to-any-exercise-or-fitness-information-displayed-on-this-website","text":"<p>I am not a licensed physical therapist, sports therapist, or medical professional of any kind. Any exercises mentioned or suggested here should not be attempted without contacting your doctor first.</p>","title":"When it comes to any exercise or fitness information displayed on this website:"},{"location":"legal/#when-it-comes-to-any-code-provided-or-shared-on-this-website","text":"<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>","title":"When it comes to any code provided or shared on this website:"},{"location":"tags/","text":"","title":"Posts by Tag"},{"location":"tags/#excel","text":"<ul> <li>Excel &amp; VBA are Gateway Drugs</li> </ul>","title":"Excel"},{"location":"tags/#github","text":"<ul> <li>Introduction to Version Control and git</li> </ul>","title":"GitHub"},{"location":"tags/#miner-curiosity","text":"<ul> <li>Blog Introduction</li> </ul>","title":"Miner Curiosity"},{"location":"tags/#software","text":"<ul> <li>Introduction to Version Control and git</li> <li>Excel &amp; VBA are Gateway Drugs</li> </ul>","title":"Software"},{"location":"tags/#vba","text":"<ul> <li>Excel &amp; VBA are Gateway Drugs</li> </ul>","title":"VBA"},{"location":"tags/#git","text":"<ul> <li>Introduction to Version Control and git</li> </ul>","title":"git"},{"location":"2021/Blog-Introduction/","tags":["Miner Curiosity"],"text":"<p>In Chinese, Tao roughly means 'absolute underlying principle of the universe'. I won't pretend to be tackling a topic so grand, but I do want to make clear the why, what, and when of my writing, as well as what success would look like. If nothing else, it may just help hold me accountable.</p>","title":"Tao of Miner Curiosity"},{"location":"2021/Blog-Introduction/#why-at-all","tags":["Miner Curiosity"],"text":"<p>For years, I have wanted to write. Not necessarily because I wanted other people to listen (though it is always nice) but instead because it was loud in the space between my ears and writing seemed to quiet things down. I've started and stopped I don't know how many journals and blogs and voice recording habits, and I'd be lying if I said I knew why. The best I can think of is this example:</p> <p>When I was in my 5th year of college running, I was struggling to find motivation. I was running better than I ever had, and knew that success was within reach, but I ultimately felt detached from my goal. What finally clicked, or at least what coincided with good motivation and performance, was when I started trying to perform for other people. As unexpected as it was, convincing myself that running was a good thing for those around me helped me get out the door, do the right stretches, and mentally prepare for the races to come. I didn't achieve all I hoped to, but I certainly achieved enough to say that I \"succeeded\". Not only that, but when the wheels eventually came off, I can easily trace it back to how I had lost that focus and become more selfish in my pursuits.</p> <p>Perhaps summed up better is a quote by John Green, author and Vlogbrother1</p>  <p>Quote</p> <p>Don't make stuff because you want to make money: it will never make you enough money. Don't make stuff because you want to get famous, because you will never feel famous enough. Make gifts for people. And work hard on making those gifts in the hope that those people will notice. Maybe they will notice how hard you worked, and maybe they won't. ...But ultimately, that doesn't change anything because your responsibility isn't to the people you're making the gift for but to the gift itself.</p>  <p>It didn't matter whether or not the people I was running for cared about what I was doing, but the fact that I wanted to deliver something for them gave me a focus I wouldn't have had otherwise. Keeping a private journal may be selfish, but posting my mistakes and learnings online might give a bit of that external motivation.</p>","title":"Why at All"},{"location":"2021/Blog-Introduction/#why-now","tags":["Miner Curiosity"],"text":"<p>Whether it's the pandemic finally getting to me, my own fallible memory, or the fact that I've finally accept I actually do have a legitimate ADD diagnosis, I have too many things rattling around in my head and no place to put them. I don't mean feelings to be journaled (though I have some of those too), but experiences. Experiences that feel unique but, when I dig deeper, I find out friends and family have similar questions or mistakes or learnings. Frustrating ones, satisfying ones, essentially just the ones you wish you could Google instead of messing up for yourself.</p> <p>I used to see others putting things out there and thought to myself, \"they must have some experience or legitimacy to allow them to do that,\" but that's just not true. All you need is the experience to share, the willingness to do so, and enough of the knowhow to make it possible. Since diving more deeply into software these last few years the knowhow is easier, and as I've gotten older the experiences have come fast and furious, so the only missing ingredient has been that ever-gnawing willingness.</p>","title":"Why Now"},{"location":"2021/Blog-Introduction/#why-these-topics","tags":["Miner Curiosity"],"text":"<p>I've never been someone to stay single-mindedly focused on a topic. It happens on a rare occasion, but usually there is going on that I've found my own strategies for having my interests layer on top of each other. So these topics, as disjointed as they may appear, help me to make sense of the world. Sometimes they're professional, sometimes personal, but all of them are here because the one thing they share is that they interest me. So if you came here because of something I said about software and your eye catches a random post about chess or meditation or scammy loan companies, don't be surprised (or maybe, you're just as surprised as I am).</p>","title":"Why These Topics"},{"location":"2021/Blog-Introduction/#why-this-cadence","tags":["Miner Curiosity"],"text":"<p>I'm a big believer in listening to experts. Not blindly, but if someone has done something for 10+ years and I've done it for fewer than 10 days, chances are they know something I don't. James Clear of Atomic Habits fame seems to have taken a similar approach to his own skill improvements, and he has published a number of articles on writing habits, both his own and others2. He maintained a twice a week schedule: given that I still have my day job (and will for some time now), I'm going to stick with one per week, published on Monday night.</p>","title":"Why This Cadence"},{"location":"2021/Blog-Introduction/#what-does-success-look-like","tags":["Miner Curiosity"],"text":"<p>I can have grander aspirations to a broader audience and more impactful content, but I don't think that would truly define success. That would be more along the lines of \"success++\". Instead, success now would be:</p> <ol> <li>Keeping honest to the schedule I have set,</li> <li>Recording useful information that could help future-me or someone else with the topic at hand, and</li> <li>Gradually improving my writing, but not being so afraid of writing something bad that I do nothing at all.</li> </ol> <p>If I can meet those goals, I'll be a happy camper.</p> <p>See you next Monday.</p>   <ol> <li> <p>This quote illustrated here by Gavin Than of Zen Pencils \u21a9</p> </li> <li> <p>An example of his James Clear's work here, with many more on his site. (You'll notice I'm trying to use some of his good habits before I pick up any bad ones)\u00a0\u21a9</p> </li> </ol>","title":"What Does Success Look Like"},{"location":"2021/Git-Intro/","tags":["git","GitHub","Software"],"text":"","title":"Introduction to Version Control and <code>git</code>"},{"location":"2021/Git-Intro/#tl-dr","tags":["git","GitHub","Software"],"text":"<ul> <li>Instead of saving code manually, you let software (specifically <code>git</code>) manage your code versions</li> <li><code>git</code> is a local tool for version control, GitHub is an optional remote tool you pair with</li> <li><code>git</code> and GitHub both have command line and GUI based tools: I personally recommend learning <code>git</code> for the command line, and using a web tool for managing GitHub</li> </ul>","title":"TL; DR"},{"location":"2021/Git-Intro/#why-should-you-care","tags":["git","GitHub","Software"],"text":"<p>Writing code is never just writing code. While it's the most fun step, writing code effectively is all about managing code, and for that you must make sure you're working on the right version. Whether you're on a team or a solo project, you'll make changes - hopefully good ones - and that means different versions floating around. The last thing you want is to have spent a day debugging, adding a new feature, or deploying only to find you've been working with an out-of-date codebase.</p> <p>Software developers like having automated tools for everything, and version control is no exception. <code>git</code> is not just one such tool, it is the tool. Instead of saving each version of your files as \"_v1\", \"_v2\", etc., you track changes with <code>git</code>, which can compare different versions and branches of files over time. This means you can always rollback changes, merge changes from others, and 'fast forward' code to include new features.</p>  <p>Tip</p> <p>It's important to note that <code>git</code> only works with text-based files: this is fine for most anything a developer is doing, but if you're working on things like Office Documents, it won't work. (I'll be posting later on about the nature of Office Documents and how they aren't what they seem: stay tuned).</p>  <p><code>git</code> itself only runs locally on your machine, but that's why you extend <code>git</code> with an online tool, like GitHub. GitHub allows you to push your codebase to an online site that so that you can work on the same files from multiple machines, share code with friends and teammates, or even deploy from a single spot. There are plenty of tutorials1 on <code>git</code> and GitHub to refer to, but here are the basics I have found helpful.</p>","title":"Why Should You Care"},{"location":"2021/Git-Intro/#quick-overview","tags":["git","GitHub","Software"],"text":"<p>Working with <code>git</code> in the command line can be hard if you're not used to using a terminal, but this is one tool where it really pays off to feel very comfortable in the command line. Working with these short commands allows you to commit code early and often, which will save you plenty of heartache in the long run.</p> Basic git commands<pre><code># Creates a new git repository in the root folder\ngit init\n\n# Shows the status of your current branch\ngit status\n\n# Adds files to be tracked\ngit add .\n\n# 'Saves' a version. One should always have a brief, descriptive message.\ngit commit -m \"MESSAGE\"\n\n# Pushes your commit to the specified branch on your GitHub repository\n# See below for creating a remote GitHub repository\ngit push origin branch_name\n\n# Creates a new branch (remove -b to access an existing branch)\ngit checkout -b branch\n\n# These 3 commands add a new remote and push your main branch the 1st time.\n# This assumes you have already created that branch on GitHub\ngit remote add origin https://github.com/USERNAME/REPO_NAME.git\ngit branch -M main\ngit push -u origin main\n\n# Opposite of push: this pulls your main branch from your remote\ngit pull origin main\n</code></pre>","title":"Quick Overview"},{"location":"2021/Git-Intro/#basic-workflow","tags":["git","GitHub","Software"],"text":"<p>This workflow assumes everything goes right (which it rarely does), but it should ground you in the basics of how you might use <code>git</code> and GitHub.</p> Basic git workflow<pre><code>git add .\n\ngit commit -m \"I updated the MeaningOfLife function to return 42\"\n\ngit push origin branch_name\n\n\n# Typically you use a pull request to combine\n# your branch with the main code base branch\n# I recommend handling all pull requests on\n# GitHub itself so we'll skip that here\n\n\n# Now that you've merged main and your branch on your remote location,\n# it's time to update the main branch on your local machine\ngit pull origin main\n\n# Merges your two branches locally so everything is up to date\ngit checkout branch_name\ngit merge main\n</code></pre>","title":"Basic Workflow"},{"location":"2021/Git-Intro/#closing-topics","tags":["git","GitHub","Software"],"text":"<p>I'll refresh this over time with more references for what to do when something goes wrong (undoing commits, merge with a teammate's code, rebasing etc.) but this should be enough to get you started on a solo project. Happy coding!</p>   <ol> <li> <p>This tutorial here from GitLab is a great introduction to using <code>git</code> on the command line, and also references this dead-useful cheat sheet.\u00a0\u21a9</p> </li> </ol>","title":"Closing Topics"},{"location":"2021/Why-Excel-and-VBA/","tags":["Excel","VBA","Software"],"text":"","title":"Excel and VBA Are Gateway Drugs"},{"location":"2021/Why-Excel-and-VBA/#the-right-tool-for-the-job","tags":["Excel","VBA","Software"],"text":"<p>Spreadsheets get a bad rap in today's day and age, most often for drudgery or for scandal. There is no doubt that data entry work is mind-numbing to the core, and the modern spreadsheet has been implicated in the wrongdoings of executives at Theranos1, Enron2, and more. That being said, I'm not joining the crowd to grab my torch and pitchfork just yet: Excel (and by extension, Google Sheets) is still one of the simplest and fastest ways for people to do practical math, and it is here to stay3. As long as spreadsheet tools are used in the business world, having a firm grounding in the capabilities and basic functions will be an advantage to just about any employee.</p> <p>More than that, I believe that for anyone looking to break into the world of software development, especially if you are coming from a more corporate job, Excel combined with its back-end language Visual Basic for Applications (VBA) is one of the best tools to learn practical skills and concepts needed for robust software development.</p> <p>Making this claim will likely make me enemies on both sides of the fence. Experienced developers can look down on the tinker-toys that Excel has to offer, with its static processing, point-and-click interface, and the garbage pile that is VBA syntax compared to most modern languages. Meanwhile, frustrated business users can point to Excel's inconsistent formula conventions and general feature sprawl as proof that Excel is simply too unwieldy to invest any more time than is necessary. To them I say: you're right. But perfection is not what you're looking for in an introductory platform.</p> <p>Excel is hardly the be-all of software tools, nor should someone invest all of their time in only learning spreadsheets (unless they fancy themselves as a competitor in the Excel eSports realm 4). But as a practical tool for modeling the world and learning the basics of how software works, you'd be hard pressed to find something better. Here's why:</p>","title":"The Right Tool for the Job"},{"location":"2021/Why-Excel-and-VBA/#no-making-apple-pies-from-scratch","tags":["Excel","VBA","Software"],"text":"<p>Carl Sagan once said, \"If you wish to make an apple pie from scratch, you must first invent the universe.\"5 It's a funny thought, but it also holds an important lesson in the computer science realm. So many aspiring developers want to know exactly how something works, but eventually you have to just accept that some steps are magic steps, and there is a small wizard in there executing 0s and 1s. There's nothing wrong with learning how to build compilers or write in Assembly, but it's foolhardy to try and become a jack of all trades in software.</p> <p>I personally believe this acceptance should be reached early: not because curiosity is bad, but because it spreads attention too thin. How can you truly learn a single concept if you're trying to learn every concept at once? In more traditional languages (Python, Java, C#, etc.) developers invest heavily in 'inventing the universe'. Before you can begin to explore functions and methods for objects and their properties, you have to fully define every single one of those objects, all of their properties, how they interact, and of course deal with the errors along the way. That is, at best, a tedious process.</p> <p>With Excel, you have a ready-built environment to experiment with right away. Want to click a button that makes a cell change color? You don't need to define what a button is, what a cell is, what the color property is, or how a click function should operate. All of that just works, right out of the box.</p> Change cell C3's background color to red<pre><code>'A few lines of code and you can see direct impact\nSub MakeC3Red()\n    Range(\"C3\").Interior.ColorIndex = 3\nEnd Sub\n</code></pre>","title":"No Making Apple Pies from Scratch"},{"location":"2021/Why-Excel-and-VBA/#practicality-from-the-beginning","tags":["Excel","VBA","Software"],"text":"<p>When I was a freshman in college, I had a glorified view of what computer science must be, and took Comp Sci 5, Intro to Computer Science my very first term. In less than a week I was convinced the field wasn't for me (I've heard Java has that effect on people), and I barely touched anything coding related for 7 years.</p> <p>Jump to my first 'real' job after after grad school, and within 6 months of joining I was teaching myself to code in the evenings, speeding up my job and improving outputs for clients. Within 2 years I had deployed multiple solutions company wide, automated several processes, and was leading the company training on Excel. It wasn't that I had more time on my hands (I didn't), nor was I suddenly smarter (I wasn't): instead, I had more problems that needed practical solutions.</p> <p>During that first course in college, I remember our final project was building a maze solver based on different sorting algorithms. A generous friend of mine dragged me kicking and screaming through that project, largely because I couldn't see a practical application for the assignment. When would I ever need to solve a maze? My friend however, went on to become a software engineer at Garmin: for him, that project was phenomenal practice for his future career. For me, I may have preferred a root canal.</p> <p>In the last few decades there has been a practical need for spreadsheets that are cleaner, faster, and more powerful, and I don't see that trend slowing yet. This means opportunities abound, and you're only limited by those practical needs. Since I first started using Excel seriously, I've built projects and models large and small, from retirement calculators and train schedule tools to an automated meeting scheduler, an investment portfolio tracker, a mortgage and budget calculator, and countless others. I didn't go and convince myself that learning to send meeting invitations would somehow help me in theory: I needed to send 60+ unique but mostly similar meeting emails every week for the foreseeable future, and I decided to spend my time solving a puzzle rather than completing a mindless task.</p> <p>If I had built that scheduler with Python, it would have been too intimidating to even begin. But since Excel already has so many of the necessary components built-in and a simple interface for storing data, it was simply a matter of trial &amp; error, refining the user experience until I had a tool that saved me hours and my company tens of thousands of dollars a year.</p>","title":"Practicality From the Beginning"},{"location":"2021/Why-Excel-and-VBA/#groundbreaking-concepts-bite-sized-projects","tags":["Excel","VBA","Software"],"text":"<p>While Excel's claim to fame is financial modeling, its structure and backend language make it very useful for learning higher level software concepts quickly and easily. The Single Responsibility Principle (SRP), Object Oriented Programming (OOP), and even web-app application architectures such as a front end, back end, and database can be demonstrated in Excel and VBA.</p> <p>Thanks to Excel's long (and frustrating) history in the world, there is no shortage of resources for the curious. I expect I'll put up a few tutorials myself, but if I put out anything new, it will be because I have stood on the shoulders of giants to get there. There are blogs and forums and StackOverflow posts as far as Google can see, with solutions to just about every problem under the sun. Not to mention, the skills developed in hunting down the right answer will pay dividends down the road with future projects.</p> <p>It's not just Excel either: Google Sheets offers many of the same capabilities, only instead of VBA it utilizes JavaScript. JS is hardly everyone's favorite language, but if you're working with the web at all, you'll need the basics under your belt, and Google Sheets can offer an easy primer on how to use it.</p>","title":"Groundbreaking Concepts, Bite-Sized Projects"},{"location":"2021/Why-Excel-and-VBA/#not-old-but-classic","tags":["Excel","VBA","Software"],"text":"<p>If you're an experienced developer, I wouldn't recommend diving into VBA: it has enough quirks and oddities to last a lifetime, and just seeing the IDE conjures the sound of a dial-up internet connection on your way to check AOL. But like I said at the beginning, this isn't about perfect: it's about a quick training ground for practical needs. If someone knows of a tool with the same level of functionality, depth of global support, ease of use for beginners, and breadth of applicability, I'm all ears. Until then though, I will simply Excel.</p>   <ol> <li> <p>Excel at the heart of Holmes' case\u00a0\u21a9</p> </li> <li> <p>Spreadsheets played a role for Enron too\u00a0\u21a9</p> </li> <li> <p>Even in 2021, Excel is still going strong \u21a9</p> </li> <li> <p>Excel has its first (and probably not last) eSports World Cup tournament \u21a9</p> </li> <li> <p>From Cosmos, the original series \u21a9</p> </li> </ol>","title":"Not Old, but Classic"},{"location":"tags/","text":"","title":"Posts by Tag"},{"location":"tags/#excel","text":"<ul> <li>Excel &amp; VBA are Gateway Drugs</li> </ul>","title":"Excel"},{"location":"tags/#github","text":"<ul> <li>Introduction to Version Control and git</li> </ul>","title":"GitHub"},{"location":"tags/#miner-curiosity","text":"<ul> <li>Blog Introduction</li> </ul>","title":"Miner Curiosity"},{"location":"tags/#software","text":"<ul> <li>Introduction to Version Control and git</li> <li>Excel &amp; VBA are Gateway Drugs</li> </ul>","title":"Software"},{"location":"tags/#vba","text":"<ul> <li>Excel &amp; VBA are Gateway Drugs</li> </ul>","title":"VBA"},{"location":"tags/#git","text":"<ul> <li>Introduction to Version Control and git</li> </ul>","title":"git"}]}