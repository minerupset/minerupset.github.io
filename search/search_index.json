{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":true},"docs":[{"location":"","text":"","title":"Home"},{"location":"#posts-in-chronological-order","text":"<p>Welcome to my various thoughts: I hope you find what you're looking for. I aim to post a new article every Monday, but the topic is always a mystery (usually to me as well). Feel free to search by tag if there's a specific topic you're looking for.</p>    Title Article Length Publish Date     Investing Your First Nest Egg Marathon 01/17/2022   GitHub and VBA Projects 5k 01/10/2022   Zugzwang: Don't Blink First Short Jog 01/03/2022   Excel LAMBDA Functions 5k 12/27/2021   Introduction to Version Control and <code>git</code> 5k 12/20/2021   Excel and VBA are Gateway Drugs Marathon 12/13/2021   Blog Introduction Marathon 12/06/2021","title":"Posts in Chronological Order"},{"location":"about/","text":"<p>I get curious about things. This is a place where I can share what I learn, even if it's only with my future self. If you found something useful or just want to chat, feel free to drop me a note at minercuriosity@outlook.com. I don't check it often, but every once in a while I may respond.</p>","title":"About Miner Curiosity"},{"location":"legal/","text":"","title":"Legal"},{"location":"legal/#when-it-comes-to-any-financial-information-displayed-on-this-website","text":"<p>I am not a licensed financial professional, and none of what is written here should be construed as financial advice. What you choose to do with your money is ultimately your responsibility, and I am not responsible for any outcomes, positive or negative, that occur from you having read about my own financial situation or musings.</p>","title":"When it comes to any financial information displayed on this website:"},{"location":"legal/#when-it-comes-to-any-home-repairs-or-diy-situations-displayed-on-this-website","text":"<p>I am not a licensed contractor or repairman, and none of what is written here should be performed without first consulting and/or hiring a trained and licensed professional in your area.</p>","title":"When it comes to any home repairs or DIY situations displayed on this website:"},{"location":"legal/#when-it-comes-to-any-exercise-or-fitness-information-displayed-on-this-website","text":"<p>I am not a licensed physical therapist, sports therapist, or medical professional of any kind. Any exercises mentioned or suggested here should not be attempted without contacting your doctor first.</p>","title":"When it comes to any exercise or fitness information displayed on this website:"},{"location":"legal/#when-it-comes-to-any-code-provided-or-shared-on-this-website","text":"<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>","title":"When it comes to any code provided or shared on this website:"},{"location":"tags/","text":"","title":"Posts by Tag"},{"location":"tags/#chess","text":"<ul> <li>Zugzwang</li> </ul>","title":"Chess"},{"location":"tags/#excel","text":"<ul> <li>Excel LAMBDA Function</li> <li>Excel &amp; VBA are Gateway Drugs</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"Excel"},{"location":"tags/#github","text":"<ul> <li>Introduction to Version Control and git</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"GitHub"},{"location":"tags/#investing","text":"<ul> <li>What To Do With Your First Nest Egg</li> </ul>","title":"Investing"},{"location":"tags/#miner-curiosity","text":"<ul> <li>Blog Introduction</li> </ul>","title":"Miner Curiosity"},{"location":"tags/#personal-finance","text":"<ul> <li>What To Do With Your First Nest Egg</li> </ul>","title":"Personal Finance"},{"location":"tags/#software","text":"<ul> <li>Introduction to Version Control and git</li> <li>Excel &amp; VBA are Gateway Drugs</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"Software"},{"location":"tags/#vba","text":"<ul> <li>Excel &amp; VBA are Gateway Drugs</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"VBA"},{"location":"tags/#git","text":"<ul> <li>Introduction to Version Control and git</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"git"},{"location":"2021/Blog-Introduction/","tags":["Miner Curiosity"],"text":"<p>In Chinese, Tao roughly means 'absolute underlying principle of the universe'. I won't pretend to be tackling a topic so grand, but I do want to make clear the why, what, and when of my writing, as well as what success would look like. If nothing else, it may just help hold me accountable.</p>","title":"Tao of Miner Curiosity"},{"location":"2021/Blog-Introduction/#why-at-all","tags":["Miner Curiosity"],"text":"<p>For years, I have wanted to write. Not necessarily because I wanted other people to listen (though it is always nice) but instead because it was loud in the space between my ears and writing seemed to quiet things down. I've started and stopped I don't know how many journals and blogs and voice recording habits, and I'd be lying if I said I knew why. The best I can think of is this example:</p> <p>When I was in my 5th year of college running, I was struggling to find motivation. I was running better than I ever had, and knew that success was within reach, but I ultimately felt detached from my goal. What finally clicked, or at least what coincided with good motivation and performance, was when I started trying to perform for other people. As unexpected as it was, convincing myself that running was a good thing for those around me helped me get out the door, do the right stretches, and mentally prepare for the races to come. I didn't achieve all I hoped to, but I certainly achieved enough to say that I \"succeeded\". Not only that, but when the wheels eventually came off, I can easily trace it back to how I had lost that focus and become more selfish in my pursuits.</p> <p>Perhaps summed up better is a quote by John Green, author and Vlogbrother1</p>  <p>Quote</p> <p>Don't make stuff because you want to make money: it will never make you enough money. Don't make stuff because you want to get famous, because you will never feel famous enough. Make gifts for people. And work hard on making those gifts in the hope that those people will notice. Maybe they will notice how hard you worked, and maybe they won't. ...But ultimately, that doesn't change anything because your responsibility isn't to the people you're making the gift for but to the gift itself.</p>  <p>It didn't matter whether or not the people I was running for cared about what I was doing, but the fact that I wanted to deliver something for them gave me a focus I wouldn't have had otherwise. Keeping a private journal may be selfish, but posting my mistakes and learnings online might give a bit of that external motivation.</p>","title":"Why at All"},{"location":"2021/Blog-Introduction/#why-now","tags":["Miner Curiosity"],"text":"<p>Whether it's the pandemic finally getting to me, my own fallible memory, or the fact that I've finally accept I actually do have a legitimate ADD diagnosis, I have too many things rattling around in my head and no place to put them. I don't mean feelings to be journaled (though I have some of those too), but experiences. Experiences that feel unique but, when I dig deeper, I find out friends and family have similar questions or mistakes or learnings. Frustrating ones, satisfying ones, essentially just the ones you wish you could Google instead of messing up for yourself.</p> <p>I used to see others putting things out there and thought to myself, \"they must have some experience or legitimacy to allow them to do that,\" but that's just not true. All you need is the experience to share, the willingness to do so, and enough of the knowhow to make it possible. Since diving more deeply into software these last few years the knowhow is easier, and as I've gotten older the experiences have come fast and furious, so the only missing ingredient has been that ever-gnawing willingness.</p>","title":"Why Now"},{"location":"2021/Blog-Introduction/#why-these-topics","tags":["Miner Curiosity"],"text":"<p>I've never been someone to stay single-mindedly focused on a topic. It happens on a rare occasion, but usually there is going on that I've found my own strategies for having my interests layer on top of each other. So these topics, as disjointed as they may appear, help me to make sense of the world. Sometimes they're professional, sometimes personal, but all of them are here because the one thing they share is that they interest me. So if you came here because of something I said about software and your eye catches a random post about chess or meditation or scammy loan companies, don't be surprised (or maybe, you're just as surprised as I am).</p>","title":"Why These Topics"},{"location":"2021/Blog-Introduction/#why-this-cadence","tags":["Miner Curiosity"],"text":"<p>I'm a big believer in listening to experts. Not blindly, but if someone has done something for 10+ years and I've done it for fewer than 10 days, chances are they know something I don't. James Clear of Atomic Habits fame seems to have taken a similar approach to his own skill improvements, and he has published a number of articles on writing habits, both his own and others2. He maintained a twice a week schedule: given that I still have my day job (and will for some time now), I'm going to stick with one per week, published on Monday night.</p>","title":"Why This Cadence"},{"location":"2021/Blog-Introduction/#what-does-success-look-like","tags":["Miner Curiosity"],"text":"<p>I can have grander aspirations to a broader audience and more impactful content, but I don't think that would truly define success. That would be more along the lines of \"success++\". Instead, success now would be:</p> <ol> <li>Keeping honest to the schedule I have set,</li> <li>Recording useful information that could help future-me or someone else with the topic at hand, and</li> <li>Gradually improving my writing, but not being so afraid of writing something bad that I do nothing at all.</li> </ol> <p>If I can meet those goals, I'll be a happy camper.</p> <p>See you next Monday.</p>   <ol> <li> <p>This quote illustrated here by Gavin Than of Zen Pencils \u21a9</p> </li> <li> <p>An example of his James Clear's work here, with many more on his site. (You'll notice I'm trying to use some of his good habits before I pick up any bad ones)\u00a0\u21a9</p> </li> </ol>","title":"What Does Success Look Like"},{"location":"2021/Excel-Lambda-Functions/","tags":["Excel"],"text":"","title":"Excel LAMBDA Functions"},{"location":"2021/Excel-Lambda-Functions/#you-nerd","tags":["Excel"],"text":"<p>I hadn't planned on one of my first posts being a moderate geekout over a brand new Excel function1, but I'll just think of this as a holiday miracle. Thanks non-denominational gift-bearing elderly figure for this prize!</p>","title":"You Nerd"},{"location":"2021/Excel-Lambda-Functions/#setting-the-stage-static-workbooks","tags":["Excel"],"text":"<p>In a typical Excel workbook (ignoring any VBA), you do not have dynamic calculations running: what you have is a static representation of your formulas. Or put another way, you can't iterate in an Excel formula. There are a few things that can (Data tables, Goal Seeks, etc.) but a formula result is a formula result, and that's it.</p> <p>Let me give an example of what I mean by 'you can't iterate':</p> An Impossible formula<pre><code>' You cannot do this in an Excel Formula\n=WHILE(A1 &lt; 5, B1 = B1 + 1)\n\n' No no not allowed\n</code></pre> <p>Once an Excel workbook is finished calculating, it needs to be static. You edit a cell, it recalculates, and then it stops. You edit another cell, it recalculates, then it stops. This is possible because Excel works off of a calculation chain to handle this order of events, called a dependency chain2: if A1 depends on B2 which depends on C3, then C3 is calculated first, then B2, then A1. This is how Excel determines if you have any circular references in the workbook, and in particularly large and nasty Excel files, if you make a change you may see everything hang for 30 seconds while your computer fan spins up a jet engine to cool off.</p>","title":"Setting the Stage: Static Workbooks"},{"location":"2021/Excel-Lambda-Functions/#lambda-function-breaks-the-chain-not-really3","tags":["Excel"],"text":"<p>In software development, a lambda function is a construct used in many languages, including Python, JavaScript, C#, and others (though it's sometimes called an anonymous function). Originally comes from lambda calculus - thanks Wikipedia4 - lambda functions essentially allow a user to define a function, and then pass it around as a variable.</p> <p>That is a boring definition.</p> <p>Practically speaking, a lambda function allows you to define a function on the go, without the computer having known beforehand what exactly the function will do. The LAMBDA function in Excel allows a user to define their own function, and then call it whenever they want. Here's an example:</p> Basic additive LAMBDA function<pre><code>=LAMBDA(x,y,x+y)(1,2)\n</code></pre> <p>Breaking down the components, you can see the arguments are made up of</p> <ul> <li>The function call: <code>=LAMBDA(</code></li> <li>The parameters to the function: <code>x,y,</code></li> <li>The function formula: <code>x+y)</code></li> <li>and the specific values for this function <code>(1,2)</code></li> </ul> <p>So this would return the result of 1+2 or 3. This example on its own isn't that special, but the real beauty of the LAMBDA function is two fold:</p> <ol> <li>You can name functions (using the Name Manager), so our function above could be called 'ADDTWOVALUES' if you'd like, and</li> <li>You can call functions recursively</li> </ol> <p>This second point is the real big change that Excel has never done before. Calling functions recursively is essentially a backdoor to writing new logical flow statements (while loops, for loops, etc.) that are more dynamic rather than Excel's traditional static structure. Let's look at some examples of what this would be like.</p>","title":"LAMBDA Function Breaks The Chain (Not Really)3"},{"location":"2021/Excel-Lambda-Functions/#some-recursive-lambda-function-examples","tags":["Excel"],"text":"<p>Because you can call a function recursively, you can iterate in the function itself. For example:</p> RECURSIVESUM - Sum numbers like a for loop<pre><code>=LAMBDA(max,IF(max&lt;=1,1,RECURSIVESUM(max-1) + max)\n</code></pre> RECURSIVEPRODUCT - Multiply numbers like a for loop<pre><code>=LAMBDA(max,IF(max&lt;=1,1,RECURSIVEPRODUCT(max-1) * max)\n</code></pre> REVERSESTRING - Read characters from front to back<pre><code>=LAMBDA(string,IF(string=\"\",string,REVERSESTRING(RIGHT(string,LEN(string)-1))&amp;LEFT(string,1)))\n</code></pre> <p>There are some helpful resources online for converting 'for loop' logic to recursive logic which I've linked in the footnotes5.</p>","title":"Some Recursive LAMBDA Function Examples"},{"location":"2021/Excel-Lambda-Functions/#how-to-create-a-named-lambda-function","tags":["Excel"],"text":"<p>As of now, you have to have the latest beta version of Excel installed on your machine. You can find instructions to do this in the footnotes1. One you have it installed, the process is essentially:</p> <ul> <li>Come up with a lambda function (like the 3 I have above)</li> <li>Create a Named Range that is the exact name of what you have in your lambda expression (above, my 3 functions are named RECURSIVESUM, RECURSIVEPRODUCT, and REVERSESTRING, respectively)</li> <li>Paste your lambda expression in the 'Refers To' section of the Named Range</li> </ul> <p>That's it. You should now be able to type `=YOUR_FUNCTION_NAME()' into a cell and have it execute your new recursive function.</p>   <ol> <li> <p>Microsoft Announcement of the LAMBDA function \u21a9\u21a9</p> </li> <li> <p>Excel's documentation on recalculation \u21a9</p> </li> <li> <p>Stevie Nicks probably hates the LAMBDA function \u21a9</p> </li> <li> <p>Anonymous (Lambda) functions aren't new \u21a9</p> </li> <li> <p>Converting For Loops to Recursion - not a chapter in '7 Habits of Highly Successful People'\u00a0\u21a9</p> </li> </ol>","title":"How To Create a Named LAMBDA Function"},{"location":"2021/Git-Intro/","tags":["git","GitHub","Software"],"text":"","title":"Introduction to Version Control and <code>git</code>"},{"location":"2021/Git-Intro/#tl-dr","tags":["git","GitHub","Software"],"text":"<ul> <li>Instead of saving code manually, you let software (specifically <code>git</code>) manage your code versions</li> <li><code>git</code> is a local tool for version control, GitHub is an optional remote tool you pair with</li> <li><code>git</code> and GitHub both have command line and GUI based tools: I personally recommend learning <code>git</code> for the command line, and using a web tool for managing GitHub</li> </ul>","title":"TL; DR"},{"location":"2021/Git-Intro/#why-should-you-care","tags":["git","GitHub","Software"],"text":"<p>Writing code is never just writing code. While it's the most fun step, writing code effectively is all about managing code, and for that you must make sure you're working on the right version. Whether you're on a team or a solo project, you'll make changes - hopefully good ones - and that means different versions floating around. The last thing you want is to have spent a day debugging, adding a new feature, or deploying only to find you've been working with an out-of-date codebase.</p> <p>Software developers like having automated tools for everything, and version control is no exception. <code>git</code> is not just one such tool, it is the tool. Instead of saving each version of your files as \"_v1\", \"_v2\", etc., you track changes with <code>git</code>, which can compare different versions and branches of files over time. This means you can always rollback changes, merge changes from others, and 'fast forward' code to include new features.</p>  <p>Tip</p> <p>It's important to note that <code>git</code> only works with text-based files: this is fine for most anything a developer is doing, but if you're working on things like Office Documents, it won't work. (I'll be posting later on about the nature of Office Documents and how they aren't what they seem: stay tuned).</p>  <p><code>git</code> itself only runs locally on your machine, but that's why you extend <code>git</code> with an online tool, like GitHub. GitHub allows you to push your codebase to an online site that so that you can work on the same files from multiple machines, share code with friends and teammates, or even deploy from a single spot. There are plenty of tutorials1 on <code>git</code> and GitHub to refer to, but here are the basics I have found helpful.</p>","title":"Why Should You Care"},{"location":"2021/Git-Intro/#quick-overview","tags":["git","GitHub","Software"],"text":"<p>Working with <code>git</code> in the command line can be hard if you're not used to using a terminal, but this is one tool where it really pays off to feel very comfortable in the command line. Working with these short commands allows you to commit code early and often, which will save you plenty of heartache in the long run.</p> Basic git commands<pre><code># Creates a new git repository in the root folder\ngit init\n\n# Shows the status of your current branch\ngit status\n\n# Adds files to be tracked\ngit add .\n\n# 'Saves' a version. One should always have a brief, descriptive message.\ngit commit -m \"MESSAGE\"\n\n# Pushes your commit to the specified branch on your GitHub repository\n# See below for creating a remote GitHub repository\ngit push origin branch_name\n\n# Creates a new branch (remove -b to access an existing branch)\ngit checkout -b branch\n\n# These 3 commands add a new remote and push your main branch the 1st time.\n# This assumes you have already created that branch on GitHub\ngit remote add origin https://github.com/USERNAME/REPO_NAME.git\ngit branch -M main\ngit push -u origin main\n\n# Opposite of push: this pulls your main branch from your remote\ngit pull origin main\n</code></pre>","title":"Quick Overview"},{"location":"2021/Git-Intro/#basic-workflow","tags":["git","GitHub","Software"],"text":"<p>This workflow assumes everything goes right (which it rarely does), but it should ground you in the basics of how you might use <code>git</code> and GitHub.</p> Basic git workflow<pre><code>git add .\n\ngit commit -m \"I updated the MeaningOfLife function to return 42\"\n\ngit push origin branch_name\n\n\n# Typically you use a pull request to combine\n# your branch with the main code base branch\n# I recommend handling all pull requests on\n# GitHub itself so we'll skip that here\n\n\n# Now that you've merged main and your branch on your remote location,\n# it's time to update the main branch on your local machine\ngit pull origin main\n\n# Merges your two branches locally so everything is up to date\ngit checkout branch_name\ngit merge main\n</code></pre>","title":"Basic Workflow"},{"location":"2021/Git-Intro/#closing-topics","tags":["git","GitHub","Software"],"text":"<p>I'll refresh this over time with more references for what to do when something goes wrong (undoing commits, merge with a teammate's code, rebasing etc.) but this should be enough to get you started on a solo project. Happy coding!</p>   <ol> <li> <p>This tutorial here from GitLab is a great introduction to using <code>git</code> on the command line, and also references this dead-useful cheat sheet.\u00a0\u21a9</p> </li> </ol>","title":"Closing Topics"},{"location":"2021/Why-Excel-and-VBA/","tags":["Excel","VBA","Software"],"text":"","title":"Excel and VBA Are Gateway Drugs"},{"location":"2021/Why-Excel-and-VBA/#the-right-tool-for-the-job","tags":["Excel","VBA","Software"],"text":"<p>Spreadsheets get a bad rap in today's day and age, most often for drudgery or for scandal. There is no doubt that data entry work is mind-numbing to the core, and the modern spreadsheet has been implicated in the wrongdoings of executives at Theranos1, Enron2, and more. That being said, I'm not joining the crowd to grab my torch and pitchfork just yet: Excel (and by extension, Google Sheets) is still one of the simplest and fastest ways for people to do practical math, and it is here to stay3. As long as spreadsheet tools are used in the business world, having a firm grounding in the capabilities and basic functions will be an advantage to just about any employee.</p> <p>More than that, I believe that for anyone looking to break into the world of software development, especially if you are coming from a more corporate job, Excel combined with its back-end language Visual Basic for Applications (VBA) is one of the best tools to learn practical skills and concepts needed for robust software development.</p> <p>Making this claim will likely make me enemies on both sides of the fence. Experienced developers can look down on the tinker-toys that Excel has to offer, with its static processing, point-and-click interface, and the garbage pile that is VBA syntax compared to most modern languages. Meanwhile, frustrated business users can point to Excel's inconsistent formula conventions and general feature sprawl as proof that Excel is simply too unwieldy to invest any more time than is necessary. To them I say: you're right. But perfection is not what you're looking for in an introductory platform.</p> <p>Excel is hardly the be-all of software tools, nor should someone invest all of their time in only learning spreadsheets (unless they fancy themselves as a competitor in the Excel eSports realm 4). But as a practical tool for modeling the world and learning the basics of how software works, you'd be hard pressed to find something better. Here's why:</p>","title":"The Right Tool for the Job"},{"location":"2021/Why-Excel-and-VBA/#no-making-apple-pies-from-scratch","tags":["Excel","VBA","Software"],"text":"<p>Carl Sagan once said, \"If you wish to make an apple pie from scratch, you must first invent the universe.\"5 It's a funny thought, but it also holds an important lesson in the computer science realm. So many aspiring developers want to know exactly how something works, but eventually you have to just accept that some steps are magic steps, and there is a small wizard in there executing 0s and 1s. There's nothing wrong with learning how to build compilers or write in Assembly, but it's foolhardy to try and become a jack of all trades in software.</p> <p>I personally believe this acceptance should be reached early: not because curiosity is bad, but because it spreads attention too thin. How can you truly learn a single concept if you're trying to learn every concept at once? In more traditional languages (Python, Java, C#, etc.) developers invest heavily in 'inventing the universe'. Before you can begin to explore functions and methods for objects and their properties, you have to fully define every single one of those objects, all of their properties, how they interact, and of course deal with the errors along the way. That is, at best, a tedious process.</p> <p>With Excel, you have a ready-built environment to experiment with right away. Want to click a button that makes a cell change color? You don't need to define what a button is, what a cell is, what the color property is, or how a click function should operate. All of that just works, right out of the box.</p> Change cell C3's background color to red<pre><code>'A few lines of code and you can see direct impact\nSub MakeC3Red()\n    Range(\"C3\").Interior.ColorIndex = 3\nEnd Sub\n</code></pre>","title":"No Making Apple Pies from Scratch"},{"location":"2021/Why-Excel-and-VBA/#practicality-from-the-beginning","tags":["Excel","VBA","Software"],"text":"<p>When I was a freshman in college, I had a glorified view of software development and took Intro to Computer Science my very first term. In less than a week I was convinced the field wasn't for me (I've heard Java has that effect on people), and I barely touched anything coding related for 7 years.</p> <p>Jump to my first 'real' job after after grad school, and within 6 months of joining I was teaching myself to code in the evenings, speeding up my job and improving outputs for clients. Within 2 years I had deployed multiple solutions company wide, automated several processes, and was leading the company training on Excel. It wasn't that I had more time on my hands (I didn't), nor was I suddenly smarter (I wasn't): instead, I had more problems that needed practical solutions.</p> <p>During that first course in college, I remember our final project was building a maze solver based on different sorting algorithms. A generous friend of mine dragged me kicking and screaming through that project, largely because I couldn't see a practical application for the assignment. When would I ever need to solve a maze? My friend however, went on to become a software engineer at Garmin: for him, that project was phenomenal practice for his future career. For me, I may have preferred a root canal.</p> <p>In the last few decades there has been a practical need for spreadsheets that are cleaner, faster, and more powerful, and I don't see that trend slowing yet. This means opportunities abound, and you're only limited by those practical needs. Since I first started using Excel seriously, I've built projects and models large and small, from retirement calculators and train schedule tools to an automated meeting scheduler, an investment portfolio tracker, a mortgage and budget calculator, and countless others. I didn't go and convince myself that learning to send meeting invitations would somehow help me in theory: I needed to send 60+ unique but mostly similar meeting emails every week for the foreseeable future, and I decided to spend my time solving a puzzle rather than completing a mindless task.</p> <p>If I had built that scheduler with Python, it would have been too intimidating to even begin. But since Excel already has so many of the necessary components built-in and a simple interface for storing data, it was simply a matter of trial &amp; error, refining the user experience until I had a tool that saved me hours and my company tens of thousands of dollars a year.</p>","title":"Practicality From the Beginning"},{"location":"2021/Why-Excel-and-VBA/#groundbreaking-concepts-bite-sized-projects","tags":["Excel","VBA","Software"],"text":"<p>While Excel's claim to fame is financial modeling, its structure and backend language make it very useful for learning higher level software concepts quickly and easily. The Single Responsibility Principle (SRP), Object Oriented Programming (OOP), and even web-app application architectures such as a front end, back end, and database can be demonstrated in Excel and VBA.</p> <p>Thanks to Excel's long (and frustrating) history in the world, there is no shortage of resources for the curious. I expect I'll put up a few tutorials myself, but if I put out anything new, it will be because I have stood on the shoulders of giants to get there. There are blogs and forums and StackOverflow posts as far as Google can see, with solutions to just about every problem under the sun. Not to mention, the skills developed in hunting down the right answer will pay dividends down the road with future projects.</p> <p>It's not just Excel either: Google Sheets offers many of the same capabilities, only instead of VBA it utilizes JavaScript. JS is hardly everyone's favorite language, but if you're working with the web at all, you'll need the basics under your belt, and Google Sheets can offer an easy primer on how to use it.</p>","title":"Groundbreaking Concepts, Bite-Sized Projects"},{"location":"2021/Why-Excel-and-VBA/#not-old-but-classic","tags":["Excel","VBA","Software"],"text":"<p>If you're an experienced developer, I wouldn't recommend diving into VBA: it has enough quirks and oddities to last a lifetime, and just seeing the IDE conjures the sound of a dial-up internet connection on your way to check AOL. But like I said at the beginning, this isn't about perfect: it's about a quick training ground for practical needs. If someone knows of a tool with the same level of functionality, depth of global support, ease of use for beginners, and breadth of applicability, I'm all ears. Until then though, I will simply Excel.</p>   <ol> <li> <p>Excel at the heart of Holmes' case\u00a0\u21a9</p> </li> <li> <p>Spreadsheets played a role for Enron too\u00a0\u21a9</p> </li> <li> <p>Even in 2021, Excel is still going strong \u21a9</p> </li> <li> <p>Excel has its first (and probably not last) eSports World Cup tournament \u21a9</p> </li> <li> <p>From Cosmos, the original series \u21a9</p> </li> </ol>","title":"Not Old, but Classic"},{"location":"2022/First-Nest-Egg/","tags":["Personal Finance","Investing"],"text":"<p>Note: I am neither a financial advisor nor an investment professional. I am merely detailing what I would do if I were in the situation I describe below. You are in charge of your own fate, and you should work with a professional if you have deeper questions.</p> <p>I've had a few friends and family in recent months tell me that for the first time in their lives, they are sitting on several thousands of dollars of savings, and they're not sure what to do next. While this question is a personal one, the parameters to answer this are pretty consistent, so I thought I'd summarize my approach here.</p> <p>First off, good for you! Earning and saving that much is a big accomplishment, and you should be proud. It's never too early nor too late to start thinking about how to work with your money, so good for you for taking the next step.</p> <p>What follows is a rubric for thinking about what to do with this money now that you have it. Note, I'm not going to talk about what you do with income: that's a post for another day covering things like 401ks and the like. We're talking about a nest egg, and the goal is not 100% efficiency. Instead, we're looking at simple and easy to implement. A decent plan you can stick to is far better than a perfect plan you don't use.</p>","title":"What To Do With Your First Nest Egg"},{"location":"2022/First-Nest-Egg/#some-starting-assumptions","tags":["Personal Finance","Investing"],"text":"<p>For the purposes of this exercise, I'm going to assume a few things:</p> <ul> <li>You have a job and you're living within your means</li> <li>You have a cash pile of $15,000</li> <li>Your monthly expenses are $3,500</li> <li>You have no major high interest debts (credit cards, student loans, etc.)</li> </ul> <p>Your cash pile may be more or less, your expenses may vary, but the ideas should still apply.</p> <p>Your first priority should be a basic emergency fund. This is money you've set aside to cover living expenses in the event of a job loss, or some other capital-E Emergency. Even if it's just 1-2 months of your expenses, make sure to save that much. If the thought of figuring out your monthly expenses is too much, try this: rent usually makes up 25%-50% of someone's monthly budget, depending on what kind of area they live in. So, multiply your rent by 2, and call that about 1 month's worth of expenses. Is that perfect? Of course not, and if you can make a better rough budget, you should. But we're not going to let perfect be the enemy of good, so we'll call that a decent estimate.</p> <p>This emergency fund should stay in the form of cash somewhere. You don't want that emergency to roll around and have to sell something to get your cash out. Preferably this money is in a high yield savings account. What's a high yield saving's account? Typically an online focused bank will give better rates than institutions like Chase, Bank of America, or other older banks. Below is a link to some options out there: I'm personally a fan of Ally Bank myself1.</p> <p>If you are looking to get a better view of your current financial standing, a tool I use and enjoy is Personal Capital (this is my personal link, we both get a bonus if you sign up with it). Personal Capital is a free-to-use aggregation software, much like Mint. However, they are much better than Mint in my book for a few reasons:</p> <ol> <li>I prefer their UI</li> <li>They aren't part of the Intuit family, a company that has allegedly made our tax code more and more cumbersome to their own benefit (so that you keep using their services)</li> <li>Their revenue stream is very clear: on Mint, it's not clear how they're selling your data. With Personal Capital, they're trying to get you to join with their wealth management tool, so selling your data to 3rd parties is not in their interest. Full disclosure, I recently signed up for their wealth management tool, but I preferred them over Mint well before I signed up</li> </ol>","title":"Some Starting Assumptions"},{"location":"2022/First-Nest-Egg/#why-investing-matters","tags":["Personal Finance","Investing"],"text":"<p>Checking in on our math up above, I've assumed you've set aside ~$7,000 out of your $15,000 of cash. The question becomes what do we do with the remaining $8,000? While it would be understandable to keep all $15,000 as a larger emergency savings fund (a good rule of thumb is 3-6 months of expenses on hand in cash), I think it's important to have at least some exposure to the various markets out there. Here's why I think that:</p> <ol> <li>Hedge against inflation: even in a high interest savings account, your money is becoming less valuable over time due to inflation. A pizza this year will cost more than a pizza last year, but if your money isn't growing, then you'll have less pizza purchasing power as time goes on.</li> <li>Compound growth: the more time you give your money to grow, the more impactful that growth will be. Just because you didn't start yesterday is no reason to wait until tomorrow.</li> <li>Get used to investing: like anything, investing is a habit and a skill, and the more you practice it, the better you'll get at it. You don't want to wait for the perfect time to start, so get started now and develop those skills over time.</li> </ol> <p>Of course investing comes with risks, and you should always apply a level of street smarts to any investments you hear about (if it sounds to good to be true, it probably is). That being said, there are some simple and affordable investments that should produce steady returns in the long run.</p>","title":"Why Investing Matters"},{"location":"2022/First-Nest-Egg/#where-should-you-invest","tags":["Personal Finance","Investing"],"text":"<p>People will try and convince you and anyone who will listen that anything can be an investment (cough Beanie Babies cough). And while there are a number of potential investment classes to look at, the main three I think of are:</p> <ol> <li>The stock market</li> <li>Real estate</li> <li>Cryptocurrency (yes, cryptocurrency)</li> </ol> <p>I am not suggesting that you invest in all of these equally, or that you even have to use all of them. If Bitcoin seems stupid to you, don't invest in it. I'm not going to proselytize here.</p> <p>The question is, do you want to manage different accounts and reporting taxes and gains on each one year over year? In the grand scheme it's not that much work, but if you value not having to think about paperwork during tax season, then maybe only pick one of these investments. It's riskier from a diversification lens, but the important thing is going with what you value and are comfortable with.</p> <p>Let's talk logistics though: what would it look like to invest in these asset classes?</p>","title":"Where Should You Invest?"},{"location":"2022/First-Nest-Egg/#the-stock-market","tags":["Personal Finance","Investing"],"text":"<p>There is way too much information out there on the stock market, so I will keep this brief. You want to open up an account with a trusted online investment brokerage where you can buy and sell equities (stocks, ETFs, index funds, etc.) through their web application. The ones I've found most useful are Fidelity and TD Ameritrade, though there are plenty of other no-fee traders. A few points to remember (do further research on each of these points if you want to learn more):</p> <ul> <li>Consistently beating the market as a whole is nearly impossible. I don't care how smart you think you are or how many times you've watched The Big Short, you will lose money. Do yourself a favor and buy ETFs and index funds</li> <li>Depending on your income level, you may be able to invest your money in a Roth IRA (Individual Retirement Account). If you can, you should open that kind of account. It allows all of your gains to grow tax free, and you can put in $6,000 / year in 20222</li> <li>In a non-retirement account, you pay taxes on any capital gains (your profit from a sale). So if you buy a stock at $25, sell it for $100, immediately buy another stock for $100 and then lose it all, the government doesn't care that you have no money: you technically made $75 worth of profit on that first sale, and you need to pay taxes on it. That's why I personally suggest only buying stocks you plan to hold for a long time and thinking through the taxes before you sell out of a position</li> <li>Free trading platforms aren't really free, and some shady groups have come in (Robinhood is one I would avoid). One could argue that the older brokerage firms are also shady - they are - but I prefer my chances with the tried and true</li> </ul>","title":"The Stock Market"},{"location":"2022/First-Nest-Egg/#real-estate","tags":["Personal Finance","Investing"],"text":"<p>I'll let you in on a secret: I'm a homeowner who's about to go back to renting. Why? Because owning your own property can sometimes suck. Maintenance and repairs can be hideously expensive, and when contractors are booked out 9+ months in advance and the city is backlogged on getting permits, it doesn't matter how handy you are, you're up the creek if you need to do some bigger work. Do I sound bitter? Too bad. Essentially, real estate is not as passive as you think.</p> <p>Luckily, you don't need to buy your own house or storefront to invest in real estate. REITs (Real Estate Investment Trusts) allow you to invest in real estate similar to the stock market, and provide an easy way to get exposed to the market. I personally strongly recommend Fundrise: you give them money, they buy commercial real estate that most normal people don't have access to, you make money, and their advisory fees are quite small. If you use my link here, those advisory fees can be 0% for you for 90 days.</p>","title":"Real Estate"},{"location":"2022/First-Nest-Egg/#cryptocurrency","tags":["Personal Finance","Investing"],"text":"<p>I said I wasn't going to preach and I won't. Cryptocurrency can be a complicated and polarizing topic. The best recommendation I have is to find a reputable platform (Gemini and Coinbase come to mind), invest only amounts that you are totally fine may disappear, and only invest in the broadly established currencies, like Bitcoin and Ethereum. No shit-coins: you're way better off going to Vegas in that case.</p>","title":"Cryptocurrency"},{"location":"2022/First-Nest-Egg/#how-much-would-i-invest-in-these","tags":["Personal Finance","Investing"],"text":"<p>Looking back at our scenario of $15,000 with $3,500 of monthly expenses, here would be my order of operations:</p> <ol> <li>$10,000 immediately into an emergency fund (I said at least $7,000 above, but 3-6 months of expenses is better). Landing it in a high yield savings account would be great if you can</li> <li>$5,000 invested across those three asset classes like so:<ul> <li>$3,500 into the stock market invested in ETFs like VOO, SPY, VTSAX, etc. (a Roth IRA if I qualify, a standard brokerage account if I don't)</li> <li>$1,000 into Fundrise (here's my personal link to Fundrise)</li> <li>$500 into Bitcoin on Gemini (here's my personal link to Gemini)</li> </ul> </li> </ol> <p>I would also set up recurring transfers into each of these accounts. Even if it's only $5 a month, having a recurring buy is so important to get you in the right mindset. If you earn a raise (or if you have a larger nest egg) I think it's fair game to raise those contribution rates and start investing more, but the important thing is to always have at least some of your money growing. Future you will thank you.</p> <p>I hope this was helpful for you to see some concrete numbers and examples, and again, congratulations on taking these next steps.</p>   <ol> <li> <p>Bankrate's assessment of high interest savings accounts\u00a0\u21a9</p> </li> <li> <p>Roth IRA rules and cut-offs\u00a0\u21a9</p> </li> </ol>","title":"How Much Would I Invest in These?"},{"location":"2022/Git-and-Excel-VBA/","tags":["Excel","Software","VBA","git","GitHub"],"text":"","title":"Using GitHub for Excel VBA Projects"},{"location":"2022/Git-and-Excel-VBA/#vba-projects-are-real-projects","tags":["Excel","Software","VBA","git","GitHub"],"text":"<p>Just because VBA is a bit of a garbage language doesn't mean it's not worthy of good tools to help maintain it. Setting up version control should be the first step in just about any code project, and with a few lines of VBA, you can integrate your Excel macro project with <code>git</code> and GitHub, the most widely used version control tool set available today.</p> <p>To complete this, we'll:</p> <ol> <li>Install GitHub Desktop (if you already have <code>git</code> installed, we can skip this)</li> <li>Use VBA to export our code files to an external folder for source control</li> <li>Use VBA to import the code files back in case we have multiple branches</li> </ol>","title":"VBA Projects are Real Projects"},{"location":"2022/Git-and-Excel-VBA/#set-up-github-desktop","tags":["Excel","Software","VBA","git","GitHub"],"text":"<p>GitHub (and the underlying tool, <code>git</code>) are phenomenal version control tools, and you don't need to know the command line to get started with them. We'll be using GitHub desktop to manage our VBA code repository (though if you are familiar with git on the command line, you can use that as well)</p> <ol> <li>Go to this link to download GitHub for Desktop</li> <li>Follow this guide to get set up</li> </ol> <p>GitHub accounts are free and you can have unlimited private repositories: you should feel comfortable signing up for an account if you haven't already.</p> <p>Once you have your GitHub Desktop account setup, create a new repository (basically a folder) in a good, consistent location. You don't need to store it with the Excel file: in fact, I'd recommend storing all of your repositories in a separate location.</p> <p>If you're newer to <code>git</code> and its capabilities, please see my other post for an introduction and more reference materials.</p>","title":"Set Up GitHub Desktop"},{"location":"2022/Git-and-Excel-VBA/#exporting-project-files-to-your-repo","tags":["Excel","Software","VBA","git","GitHub"],"text":"<p>The code below can be pasted as a new module into your VBA project. Whenever you want to copy your latest codebase to your folder, simply run this macro and all of your relevant files will be copied over. There are two additional elements to consider:</p> <ol> <li>Update the variable 'pathName' to your repository location</li> <li>Add 'Microsoft Visual Basic for Applications Extensibility 5.3' as a reference to the project (instructions in the code below)</li> </ol> VBA Script for Exporting Files<pre><code>Sub ExportFilesToRepo()\n\n    ' Tool for exporting VBA-based components to an external folder (say for storing in a git repo)\n    ' Make sure to go to the Toolbar Menu -&gt; Tools -&gt; References -&gt; Select \"Microsoft Visual Basic For Applications Extensibility 5.3\"\n    ' Without this, you will not be able to access the VBA Project of the workbook\n\n    ' Adjust your path name here\n    Dim pathName As String: pathName = \"C:\\PATH-TO-YOUR-REPO\\\"\n\n    ' The VBComponent Class represents those objects that make up an Excel Workbook\n    Dim vbModule As VBComponent\n\n    ' This loops through each of those VBComponents in the Active Workbook\n    For Each vbModule In ActiveWorkbook.VBProject.VBComponents\n\n        ' Some Debug.Print statements for easy testing during development\n        Debug.Print vbModule.Name\n\n        ' Runs a selection based on the type of module the component is and either exports it\n        ' to the specified path (or doesn't) based on that type. It also adds the correct file extension\n        ' based on that type. For a reference on types go to:\n        'https://docs.microsoft.com/en-us/office/vba/language/reference/visual-basic-add-in-model/properties-visual-basic-add-in-model#type\n\n        Select Case vbModule.Type\n            Case 1\n                vbModule.Export pathName &amp; vbModule.Name &amp; \".bas\"\n                Debug.Print \"Exported\"\n            Case 2\n                vbModule.Export pathName &amp; vbModule.Name &amp; \".cls\"\n                Debug.Print \"Exported\"\n            Case 3\n                vbModule.Export pathName &amp; vbModule.Name &amp; \".frm\"\n                Debug.Print \"Exported\"\n            Case Else\n                Debug.Print \"Not exporting \" &amp; vbModule.Name\n        End Select\n    Next vbModule\nEnd Sub\n</code></pre>","title":"Exporting Project Files to Your Repo"},{"location":"2022/Git-and-Excel-VBA/#commit-and-push-your-code","tags":["Excel","Software","VBA","git","GitHub"],"text":"<p>I'm not going to go in-depth on <code>git</code> or GitHub here, but there are plenty of resources covering the key topics of committing to a branch, pushing / pulling a branch, and merging a branch that will all be very useful in maintaining your VBA Project. See my previous post on the topic for a brief primer on <code>git</code> for the command line and how it can help manage your code projects.</p>","title":"Commit and Push Your Code"},{"location":"2022/Git-and-Excel-VBA/#import-project-files-from-your-repo","tags":["Excel","Software","VBA","git","GitHub"],"text":"<p>Like the export code above, be sure and update your pathName variable to point to your repository. You'll notice I named the VBA Module that handles both import and export as <code>gitConnector</code>: whatever you name your file, make sure you handle that as an edge case. It may require you to do a bit more manual work anytime you edit this specific file, but that shouldn't be too frequent.</p> VBA Script for Importing Files<pre><code>Sub ImportFilesToRepo()\n\n    ' Tool for importing VBA files from a given folder destination\n    ' Make sure to go to the Toolbar Menu -&gt; Tools -&gt; References -&gt; Select \"Microsoft Visual Basic For Applications Extensibility 5.3\"\n    ' Without this, you will not be able to access the VBA Project of the workbook\n\n    Dim pathName As String: pathName = \"C:\\PATH-TO-YOUR-REPO\\\"\n\n    'Dir is a function that allows you to iterate through files in a directory\n    Dim filePath As Variant: filePath = Dir(pathName)\n    Dim vbModule As VBComponent\n\n    Do While Len(filePath) &gt; 0\n\n        'Accounting for modules, classes, and forms\n        If Right(filePath, 3) = \"bas\" Or Right(filePath, 3) = \"cls\" Or Right(filePath, 3) = \"frm\" Then\n\n            'Remove the edge case of this file\n            If filePath &lt;&gt; \"gitConnector.bas\" Then\n\n                'Need to remove the existing module\n                For Each vbModule In ThisWorkbook.VBProject.VBComponents\n\n                    'If the name of the module matches the name of the file (without its extension)\n                    If vbModule.Name = Left(filePath, Len(filePath) - 4) Then\n\n                        'Delete the module\n                        ThisWorkbook.VBProject.VBComponents.Remove vbModule\n\n                        'Import the new module from the path\n                        ActiveWorkbook.VBProject.VBComponents.Import (pathName &amp; filePath)\n                    End If\n                Next\n            End If\n        End If\n\n        'This is how Dir iterates to the next file\n        filePath = Dir\n    Loop\nEnd Sub\n</code></pre> <p>That's it - with these two methods (and GitHub for Desktop on your machine) you should be able to maintain your projects for many iterations to come.</p>","title":"Import Project Files From Your Repo"},{"location":"2022/Zugzwang/","tags":["Chess"],"text":"<p>In chess, zugzwang (pronounced Tsug-svang), describes a situation where every legal move for a given player is unfavorable. Though this typically presents itself in the endgame, this can happen at any point in the course of play.</p> <p>See the following board as an example:</p> <p></p> <p>Whichever King moves first will lose their pawn, and almost certainly the game. This becomes a situation to avoid, but also one to drive opponents towards if possible.</p> <p>In a more baked-out example game (like the game below), whichever side can safely drag out their moves with the Queen-side pawns will eventually force zugzwang and gain the upper hand.</p> <p></p> <p>I hope this has been helpful, and that you can avoid (or intentionally cause) zugzwang when it arises.</p>","title":"Zugzwang: Don't Blink First"},{"location":"tags/","text":"","title":"Posts by Tag"},{"location":"tags/#chess","text":"<ul> <li>Zugzwang</li> </ul>","title":"Chess"},{"location":"tags/#excel","text":"<ul> <li>Excel LAMBDA Function</li> <li>Excel &amp; VBA are Gateway Drugs</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"Excel"},{"location":"tags/#github","text":"<ul> <li>Introduction to Version Control and git</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"GitHub"},{"location":"tags/#investing","text":"<ul> <li>What To Do With Your First Nest Egg</li> </ul>","title":"Investing"},{"location":"tags/#miner-curiosity","text":"<ul> <li>Blog Introduction</li> </ul>","title":"Miner Curiosity"},{"location":"tags/#personal-finance","text":"<ul> <li>What To Do With Your First Nest Egg</li> </ul>","title":"Personal Finance"},{"location":"tags/#software","text":"<ul> <li>Introduction to Version Control and git</li> <li>Excel &amp; VBA are Gateway Drugs</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"Software"},{"location":"tags/#vba","text":"<ul> <li>Excel &amp; VBA are Gateway Drugs</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"VBA"},{"location":"tags/#git","text":"<ul> <li>Introduction to Version Control and git</li> <li>Using GitHub for Excel VBA Projects</li> </ul>","title":"git"}]}